---
import type { ArticleAssets } from "../types";
import FormattedDate from "./FormattedDate.astro";
import type { CollectionEntry } from "astro:content";

interface Props {
  assets: ArticleAssets;
}

// Define types for our grouped posts
interface ArticleAssetGroup {
  year: number;
  month: string;
  assets: ArticleAssets;
}

interface GroupedAssets {
  [key: string]: ArticleAssetGroup;
}

const { assets } = Astro.props;

// Filter published posts
const publishedPosts = assets.filter((a) => a.data.published);

// Group posts by month and year
const GroupedAssets: GroupedAssets = publishedPosts.reduce(
  (groups: GroupedAssets, asset) => {
    const date = new Date(asset.data.pubDate);
    const monthYear = `${date.getFullYear()}-${date.getMonth()}`;

    if (!groups[monthYear]) {
      groups[monthYear] = {
        year: date.getFullYear(),
        month: date.toLocaleString("default", { month: "long" }),
        assets: [],
      };
    }

    groups[monthYear].assets.push(asset);
    return groups;
  },
  {},
);

// Convert to array and sort by date (newest first)
const sortedGroups: ArticleAssetGroup[] = Object.values(GroupedAssets).sort(
  (a: ArticleAssetGroup, b: ArticleAssetGroup) => {
    // Sort by year descending
    if (a.year !== b.year) return b.year - a.year;
    // Then by month descending
    return (
      new Date(0, Number(new Date(0, 0, 1).getMonth() + b.month)).getMonth() -
      new Date(0, Number(new Date(0, 0, 1).getMonth() + a.month)).getMonth()
    );
  },
);
---

<div class="code-assets-by-date">
  {
    sortedGroups.map((group) => (
      <section class="month-section">
        <h2 class="month-heading">
          {group.month} {group.year}
        </h2>
        <ul>
          {group.assets.map((a) => (
            <li>
              <FormattedDate date={a.data.pubDate} />
              <a href={`/code/${a.slug}/`}>{a.data.title}</a>
            </li>
          ))}
        </ul>
      </section>
    ))
  }
</div>

<style>
  .month-section {
    ul {
      list-style: none;
      padding: 0;
      li {
        display: grid;
        gap: 1rem;
        grid-template-columns: auto 1fr;
        margin-bottom: 0.5rem;
      }
    }
  }
</style>
